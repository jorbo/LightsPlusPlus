if: branch = master
language: cpp
dist: trusty
sudo: required
compiler:
  - gcc

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-6
      - libcurlpp-dev
      - libboost-all-dev
    update: true
before_install:
  - pip install --user cpp-coveralls
# the install step will take care of deploying a newer cmake version
install:
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.tar.gz
  # this is optional, but useful:
  # do a quick md5 check to ensure that the archive we downloaded did not get compromised
  - echo "91dc9af7345e458eb10c853aa875e591efb7079a045641685ddec8d973c2b2bc *cmake-3.14.0-Linux-x86_64.tar.gz" > cmake_sha256.txt
  - sha256sum -c cmake_sha256.txt
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.14.0-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  # create a build folder for the out-of-source build
  - mkdir build
  # switch to build directory
  - cd build
  # run cmake; here we assume that the project's
  # top-level CMakeLists.txt is located at '..'
  - CXX=/usr/bin/g++-6 CC=/usr/bin/gcc-6 cmake -DCMAKE_BUILD_TYPE=Release ..

script:
  # once CMake has done its job we just build using make as usual
  - make
after_success:
  - bash <(curl -s https://codecov.io/bash)